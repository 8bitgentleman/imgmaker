{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"imgmaker \u00b6 Create high-quality images programmatically using easily-hackable templates. imgmaker is a Python package that leverages headless Google Chrome via selenium for image generation, which counterintuitively has many benefits: Renders images at Retina resolution (2x DPI) for improved image/text quality, and downsamples them by default for further improved antialiasing. Templates are just HTML and CSS, allowing them to be tweaked even by designers. Since the CSS is responsive, you get conditional image adjustments based on the image width without additional code flows. Optional dynamic image height to fit whatever text is provided. Leverages jinja2 for Python templating, Bulma for high-quality CSS-only layouts, and Font Awesome for icon fonts. The generated images can be used for many things, including social sharing thumbnails, Twitter bots, and APIs. Installation \u00b6 imgmaker can be installed from PyPI via pip. (Python 3.6+) pip3 install imgmaker You will also need to download a ChromeDriver with the same version as your installed Google Chrome. imgmaker has a CLI tool that will automatically download the ChromeDriver for your platform corresponding to the latest stable version to the current directory: imgmaker chromedriver Maintainer/Creator \u00b6 Max Woolf ( @minimaxir ) Max's open-source projects are supported by his Patreon and GitHub Sponsors . If you found this project helpful, any monetary contributions to the Patreon are appreciated and will be put to good creative use.","title":"Home"},{"location":"#imgmaker","text":"Create high-quality images programmatically using easily-hackable templates. imgmaker is a Python package that leverages headless Google Chrome via selenium for image generation, which counterintuitively has many benefits: Renders images at Retina resolution (2x DPI) for improved image/text quality, and downsamples them by default for further improved antialiasing. Templates are just HTML and CSS, allowing them to be tweaked even by designers. Since the CSS is responsive, you get conditional image adjustments based on the image width without additional code flows. Optional dynamic image height to fit whatever text is provided. Leverages jinja2 for Python templating, Bulma for high-quality CSS-only layouts, and Font Awesome for icon fonts. The generated images can be used for many things, including social sharing thumbnails, Twitter bots, and APIs.","title":"imgmaker"},{"location":"#installation","text":"imgmaker can be installed from PyPI via pip. (Python 3.6+) pip3 install imgmaker You will also need to download a ChromeDriver with the same version as your installed Google Chrome. imgmaker has a CLI tool that will automatically download the ChromeDriver for your platform corresponding to the latest stable version to the current directory: imgmaker chromedriver","title":"Installation"},{"location":"#maintainercreator","text":"Max Woolf ( @minimaxir ) Max's open-source projects are supported by his Patreon and GitHub Sponsors . If you found this project helpful, any monetary contributions to the Patreon are appreciated and will be put to good creative use.","title":"Maintainer/Creator"},{"location":"github-social/","text":"A template invoking a variant of watermarking popular on social sharing cards. (although your mileage may vary) Template Dimensions \u00b6 1280px x 640px Template Parameters \u00b6 Name Description Default lang_icon Language icon \"fab fa-python\" language Language text \"Python tags Tag text \"image generation, APIs\" madeby Author \"Made by me!\" avatar User avatar. Mona Lisa background Background Mona Lisa Example Usage \u00b6 (note: due to file-size [about 500KB per image], the images included on this page have been compressed using TinyPNG ) Set up imgmaker: from imgmaker import imgmaker i = imgmaker () No configuration: i . generate ( \"github-social\" )","title":"Github social"},{"location":"github-social/#template-dimensions","text":"1280px x 640px","title":"Template Dimensions"},{"location":"github-social/#template-parameters","text":"Name Description Default lang_icon Language icon \"fab fa-python\" language Language text \"Python tags Tag text \"image generation, APIs\" madeby Author \"Made by me!\" avatar User avatar. Mona Lisa background Background Mona Lisa","title":"Template Parameters"},{"location":"github-social/#example-usage","text":"(note: due to file-size [about 500KB per image], the images included on this page have been compressed using TinyPNG ) Set up imgmaker: from imgmaker import imgmaker i = imgmaker () No configuration: i . generate ( \"github-social\" )","title":"Example Usage"},{"location":"helpful-notes/","text":"Cleanup \u00b6 When you are done, it's recommended to close the Google Chrome instance, otherwise they will hang around: i . close () ...or you can take the thermonuclear option and kill all chromedrivers and Chrome instances from the command line. imgmaker kill-all-chrome Protips \u00b6 Yes, using Google Chrome automation is a galaxy-brain approach toward programmatic image generation. However, the feature robustness of Chrome and hackability it allows far outweights the \"weight\" of Chrome, and it would take substantially more code to natively replicate, especially cross-platform. If you want to intentionally create Retina (2x DPI) or higher assets, you can disable downsampling by passing downsampling=False to generate() . Additionally, you can pass a scale value to the imgmaker() constructor (e.g. imgmaker(scale=6) ) for very high-resolution pictures! Do not use custom_css with id-level rules; this causes the ChromeDriver to hang for whatever reason.","title":"Helpful Notes"},{"location":"helpful-notes/#cleanup","text":"When you are done, it's recommended to close the Google Chrome instance, otherwise they will hang around: i . close () ...or you can take the thermonuclear option and kill all chromedrivers and Chrome instances from the command line. imgmaker kill-all-chrome","title":"Cleanup"},{"location":"helpful-notes/#protips","text":"Yes, using Google Chrome automation is a galaxy-brain approach toward programmatic image generation. However, the feature robustness of Chrome and hackability it allows far outweights the \"weight\" of Chrome, and it would take substantially more code to natively replicate, especially cross-platform. If you want to intentionally create Retina (2x DPI) or higher assets, you can disable downsampling by passing downsampling=False to generate() . Additionally, you can pass a scale value to the imgmaker() constructor (e.g. imgmaker(scale=6) ) for very high-resolution pictures! Do not use custom_css with id-level rules; this causes the ChromeDriver to hang for whatever reason.","title":"Protips"},{"location":"hero/","text":"A very simple example of imgmaker leveraging Bulma's hero unit styles . The Hero template is the default template used if none is specified. Dimensions \u00b6 320px x 240px Parameters \u00b6 Name Description Default color The color of the Hero unit, following the Bulma documentation. primary bold Boolean whether to use the bold style as noted in the documentation False center Whether to center the text True title The title text. \"The title!\" subtitle The subtitle text. \"The subtitle!\" custom_css Custom CSS; refer to the raw template for HTML elements. '' Example Usage \u00b6 See the tutorial in the documentation.","title":"Hero"},{"location":"hero/#dimensions","text":"320px x 240px","title":"Dimensions"},{"location":"hero/#parameters","text":"Name Description Default color The color of the Hero unit, following the Bulma documentation. primary bold Boolean whether to use the bold style as noted in the documentation False center Whether to center the text True title The title text. \"The title!\" subtitle The subtitle text. \"The subtitle!\" custom_css Custom CSS; refer to the raw template for HTML elements. ''","title":"Parameters"},{"location":"hero/#example-usage","text":"See the tutorial in the documentation.","title":"Example Usage"},{"location":"meme/","text":"A template invoking image macros, complete with Impact font. Dimensions \u00b6 512px x 512px Parameters \u00b6 Name Description Default top_text Top text for the meme \"Top Text\" bottom_text Bottom text for the meme \"Bottom Text\" background Image of the meme (URL or local path.) Mona Lisa custom_css Custom CSS; refer to the raw template for HTML elements. Empty Example Usage \u00b6 (note: due to file-size [about 500KB per image], the images included on this page have been compressed using TinyPNG ) Set up imgmaker: from imgmaker import imgmaker i = imgmaker () No configuration: i . generate ( 'meme' ) Change the text. Thanks to the underlying Google Chrome and Bulma, text will wrap correctly! i . generate ( \"meme\" , { \"top_text\" : \"World's Most Famous Portrait\" , \"bottom_text\" : \"Now a test case for a random Python app\" }, ) Hack This Template! \u00b6 You can change the font via CSS (to a system-installed font), plus other hacks! This code also reproduces the image used in the repo README. i . generate ( \"meme\" , { \"top_text\" : \"World's Most Famous Portrait\" , \"bottom_text\" : \"Now a test case for a random Python app\" , \"custom_css\" : \"body {-webkit-text-stroke: 0.5px red; transform: skew(.312rad); text-shadow: 1px 1px 5px blue;}\" }, width = 800 , height = 450 , )","title":"Meme (Image Macro)"},{"location":"meme/#dimensions","text":"512px x 512px","title":"Dimensions"},{"location":"meme/#parameters","text":"Name Description Default top_text Top text for the meme \"Top Text\" bottom_text Bottom text for the meme \"Bottom Text\" background Image of the meme (URL or local path.) Mona Lisa custom_css Custom CSS; refer to the raw template for HTML elements. Empty","title":"Parameters"},{"location":"meme/#example-usage","text":"(note: due to file-size [about 500KB per image], the images included on this page have been compressed using TinyPNG ) Set up imgmaker: from imgmaker import imgmaker i = imgmaker () No configuration: i . generate ( 'meme' ) Change the text. Thanks to the underlying Google Chrome and Bulma, text will wrap correctly! i . generate ( \"meme\" , { \"top_text\" : \"World's Most Famous Portrait\" , \"bottom_text\" : \"Now a test case for a random Python app\" }, )","title":"Example Usage"},{"location":"meme/#hack-this-template","text":"You can change the font via CSS (to a system-installed font), plus other hacks! This code also reproduces the image used in the repo README. i . generate ( \"meme\" , { \"top_text\" : \"World's Most Famous Portrait\" , \"bottom_text\" : \"Now a test case for a random Python app\" , \"custom_css\" : \"body {-webkit-text-stroke: 0.5px red; transform: skew(.312rad); text-shadow: 1px 1px 5px blue;}\" }, width = 800 , height = 450 , )","title":"Hack This Template!"},{"location":"template/","text":"Here's a quick tutorial on how you can build your own template for scratch, and easily edit it to your needs. Hello World! \u00b6 Here's the starter template from the Bulma documentation, sans irrelevant metadata: <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\" /> < script defer src = \"https://use.fontawesome.com/releases/v5.3.1/js/all.js\" ></ script > </ head > < body > < section class = \"section\" > < div class = \"container\" > < h1 class = \"title\" > Hello World </ h1 > < p class = \"subtitle\" > My first website with < strong > Bulma </ strong > ! </ p > </ div > </ section > </ body > </ html > Copy the code above and save it into a file (for this demo, we'll use demo.html ). Once that's done, you can generate an image from this file: from imgmaker import imgmaker i = imgmaker () i . generate ( 'demo.html' ) By default, imgmaker generates an image that is 512px wide, with dynamic height. Adding customizable text \u00b6 What if we want to add the ability to customize the text, and style it? Replace the text with Jinja template blocks. <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\" /> < script defer src = \"https://use.fontawesome.com/releases/v5.3.1/js/all.js\" ></ script > </ head > < body > < section class = \"section\" > < div class = \"container\" > < h1 class = \"title\" > {{ title | markdown }} </ h1 > < p class = \"subtitle\" > {{ subtitle | markdown }} </ p > </ div > </ section > </ body > </ html > The markdown Jinja filter is a custom filter that lets you use Markdown formatting for input text (and also lets you use pretty-quotes because why not). Save that HTML to demo.html , and rerun: i . generate ( \"demo.html\" , { \"title\" : \"imgmaker is _awesome_!\" , \"subtitle\" : \" \\\" The best Python app ever. \\\" \" } ) HTML Layout, Images, and Styles \u00b6 Two notable features of Bulma are automatic column sizing and fixed image sizes . We will refactor the HTML above slightly such that an image is in the first column, and the two texts are in the right column. Additionally, we'll add basic Custom CSS support within <style> tags. <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\" /> < script defer src = \"https://use.fontawesome.com/releases/v5.3.1/js/all.js\" ></ script > </ head > < style > { { custom_css } } </ style > < body > < section class = \"section\" > < div class = \"container\" > < div class = \"columns is-mobile\" > < div class = \"left column is-half\" > < figure class = \"image container is-128x128\" > < img class = \"is-rounded\" src = \"{{ image | img_encode }}\" /> </ figure > </ div > < div class = \"right column is-half\" > < h1 class = \"title\" > {{ title | markdown }} </ h1 > < p class = \"subtitle\" > {{ subtitle | markdown }} </ p > </ div > </ div > </ div > </ section > </ body > </ html > The img_encode filter is a workaround for local file visibility: if you're downloading a remote image by providing a URL, it works as normal, but if you're using a local image, it may be necessary to use the filter to ensure the image gets passed to the template. Save to demo.html and run this code. i . generate ( \"demo.html\" , { \"title\" : \"imgmaker is _awesome_!\" , \"subtitle\" : \" \\\" The best Python app ever. \\\" \" , \"image\" : \"https://avatars2.githubusercontent.com/u/2179708\" } ) Now let's add some custom CSS. In this code, both columns are given different classes, which lets us style them independently. i . generate ( \"demo.html\" , { \"title\" : \"imgmaker is _awesome_!\" , \"subtitle\" : \" \\\" The best Python app ever. \\\" \" , \"image\" : \"https://avatars2.githubusercontent.com/u/2179708\" , \"custom_css\" : \".left {filter: sepia(100%);} .right {transform: rotate(20deg);}\" } ) Have fun!","title":"Create Your Own Template"},{"location":"template/#hello-world","text":"Here's the starter template from the Bulma documentation, sans irrelevant metadata: <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\" /> < script defer src = \"https://use.fontawesome.com/releases/v5.3.1/js/all.js\" ></ script > </ head > < body > < section class = \"section\" > < div class = \"container\" > < h1 class = \"title\" > Hello World </ h1 > < p class = \"subtitle\" > My first website with < strong > Bulma </ strong > ! </ p > </ div > </ section > </ body > </ html > Copy the code above and save it into a file (for this demo, we'll use demo.html ). Once that's done, you can generate an image from this file: from imgmaker import imgmaker i = imgmaker () i . generate ( 'demo.html' ) By default, imgmaker generates an image that is 512px wide, with dynamic height.","title":"Hello World!"},{"location":"template/#adding-customizable-text","text":"What if we want to add the ability to customize the text, and style it? Replace the text with Jinja template blocks. <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\" /> < script defer src = \"https://use.fontawesome.com/releases/v5.3.1/js/all.js\" ></ script > </ head > < body > < section class = \"section\" > < div class = \"container\" > < h1 class = \"title\" > {{ title | markdown }} </ h1 > < p class = \"subtitle\" > {{ subtitle | markdown }} </ p > </ div > </ section > </ body > </ html > The markdown Jinja filter is a custom filter that lets you use Markdown formatting for input text (and also lets you use pretty-quotes because why not). Save that HTML to demo.html , and rerun: i . generate ( \"demo.html\" , { \"title\" : \"imgmaker is _awesome_!\" , \"subtitle\" : \" \\\" The best Python app ever. \\\" \" } )","title":"Adding customizable text"},{"location":"template/#html-layout-images-and-styles","text":"Two notable features of Bulma are automatic column sizing and fixed image sizes . We will refactor the HTML above slightly such that an image is in the first column, and the two texts are in the right column. Additionally, we'll add basic Custom CSS support within <style> tags. <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\" /> < script defer src = \"https://use.fontawesome.com/releases/v5.3.1/js/all.js\" ></ script > </ head > < style > { { custom_css } } </ style > < body > < section class = \"section\" > < div class = \"container\" > < div class = \"columns is-mobile\" > < div class = \"left column is-half\" > < figure class = \"image container is-128x128\" > < img class = \"is-rounded\" src = \"{{ image | img_encode }}\" /> </ figure > </ div > < div class = \"right column is-half\" > < h1 class = \"title\" > {{ title | markdown }} </ h1 > < p class = \"subtitle\" > {{ subtitle | markdown }} </ p > </ div > </ div > </ div > </ section > </ body > </ html > The img_encode filter is a workaround for local file visibility: if you're downloading a remote image by providing a URL, it works as normal, but if you're using a local image, it may be necessary to use the filter to ensure the image gets passed to the template. Save to demo.html and run this code. i . generate ( \"demo.html\" , { \"title\" : \"imgmaker is _awesome_!\" , \"subtitle\" : \" \\\" The best Python app ever. \\\" \" , \"image\" : \"https://avatars2.githubusercontent.com/u/2179708\" } ) Now let's add some custom CSS. In this code, both columns are given different classes, which lets us style them independently. i . generate ( \"demo.html\" , { \"title\" : \"imgmaker is _awesome_!\" , \"subtitle\" : \" \\\" The best Python app ever. \\\" \" , \"image\" : \"https://avatars2.githubusercontent.com/u/2179708\" , \"custom_css\" : \".left {filter: sepia(100%);} .right {transform: rotate(20deg);}\" } ) Have fun!","title":"HTML Layout, Images, and Styles"},{"location":"tutorial/","text":"First, you can instantiate an imgmaker object for generation, which starts up a headless Google Chrome in the background. from imgmaker import imgmaker i = imgmaker () imgmaker contains built-in templates (you can view all the templates in the corresponding folder, with READMEs for each one). We'll use the Hero template; the default used if no template is specified. i . generate () We can pass a dict containing template parameters. For the Hero template, we can specify the title and subtitle. i . generate ( \"hero\" , { \"title\" : \"imgmaker\" , \"subtitle\" : \"Create high-quality images programmatically\" }, ) You can also alter the background color matching the Bulma documentation, use the bold background variant instead, set the image to a dynamic height to fit all the text, and/or use custom CSS and go crazy . i . generate ( \"hero\" , { \"title\" : \"imgmaker\" , \"subtitle\" : \"Create high-quality images programmatically.<br /><br />\" + \"The generated images can be used for many things, \" + \"including social sharing thumbnails, Twitter bots, and APIs.\" , \"color\" : \"dark\" , \"bold\" : True , \"custom_css\" : \".container {font-family: Comic Sans MS; transform: rotate(-20deg);}\" }, height = - 1 )","title":"Tutorial"},{"location":"watermark/","text":"A template invoking a simple watermark on an image, inspired by Reddit's new watermarking template . But with a twist. Dimensions \u00b6 800px x 450px You will likely need to manually determine the width/height before passing them to generate() Parameters \u00b6 Name Description Default left_text Left text for the watermark \"Made by **me**!\" fa_icon Font Awesome icon \"fas fa-laptop-house brand_text Text of the brand. \"My brand!\" background Image of the meme (URL or local path.) Mona Lisa custom_css Custom CSS; refer to the raw template for HTML elements. Empty Example Usage \u00b6 (note: due to file-size [about 500KB per image], the images included on this page have been compressed using TinyPNG ) Set up imgmaker: from imgmaker import imgmaker i = imgmaker () No configuration: i . generate ( \"watermark\" ) Change the text and the icon. i . generate ( \"watermark\" , { \"left_text\" : \"_Mona Lisa_, by Leonardo da Vinci\" , \"fa_icon\" : \"fas fa-paint-brush\" , \"brand_text\" : \"Renaissance\" }, ) This template is responsive: if the width is less than 768px, to avoid text overlap, only the brand + icon will display. i . generate ( \"watermark\" , { \"left_text\" : \"_Mona Lisa_, by Leonardo da Vinci\" , \"fa_icon\" : \"fas fa-paint-brush\" , \"brand_text\" : \"Renaissance\" }, width = 450 )","title":"Watermarked Image"},{"location":"watermark/#dimensions","text":"800px x 450px You will likely need to manually determine the width/height before passing them to generate()","title":"Dimensions"},{"location":"watermark/#parameters","text":"Name Description Default left_text Left text for the watermark \"Made by **me**!\" fa_icon Font Awesome icon \"fas fa-laptop-house brand_text Text of the brand. \"My brand!\" background Image of the meme (URL or local path.) Mona Lisa custom_css Custom CSS; refer to the raw template for HTML elements. Empty","title":"Parameters"},{"location":"watermark/#example-usage","text":"(note: due to file-size [about 500KB per image], the images included on this page have been compressed using TinyPNG ) Set up imgmaker: from imgmaker import imgmaker i = imgmaker () No configuration: i . generate ( \"watermark\" ) Change the text and the icon. i . generate ( \"watermark\" , { \"left_text\" : \"_Mona Lisa_, by Leonardo da Vinci\" , \"fa_icon\" : \"fas fa-paint-brush\" , \"brand_text\" : \"Renaissance\" }, ) This template is responsive: if the width is less than 768px, to avoid text overlap, only the brand + icon will display. i . generate ( \"watermark\" , { \"left_text\" : \"_Mona Lisa_, by Leonardo da Vinci\" , \"fa_icon\" : \"fas fa-paint-brush\" , \"brand_text\" : \"Renaissance\" }, width = 450 )","title":"Example Usage"}]}